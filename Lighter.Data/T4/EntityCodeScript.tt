<#@ template language="C#" debug="false" hostSpecific="true" #>
<#@ output extension="cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)\Utility\bin\Debug\Utility.dll" #>
<#@ Assembly Name="$(SolutionDir)\Lighter.Server.Infrastructure\bin\Debug\Lighter.Server.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)\Server.Services\BaseService\bin\Debug\Lighter.BaseService.dll" #>
<#@ Assembly Name="$(SolutionDir)\Lighter.ServiceHostManager\bin\Debug\Lighter.ServiceManager.dll" #>
<#@ import namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="Utility" #>
<#@ Import Namespace="Utility.T4" #>
<#@ import namespace="Lighter.Server.Infrastructure" #>
<#@ import namespace="Lighter.BaseService" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Include\EntityConfigurationTemplate.ttinclude" #>
<#@ include file="Include\IEntityRepositoryTemplate.ttinclude" #>
<#@ include file="Include\EntityRepositoryTemplate.ttinclude" #>
<#
	//System.Diagnostics.Debugger.Launch();

    string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    string projectPath =currentPath.Substring(0, currentPath.IndexOf(@"\T4"));
    string solutionPath = currentPath.Substring(0, currentPath.IndexOf(@"\Lighter.Data"));

    string modelFile= Path.Combine(solutionPath, @"Lighter.Data\bin\Debug\Lighter.Data.dll");
    byte[] fileData= File.ReadAllBytes(modelFile);
    Assembly assembly = Assembly.Load(fileData);
    Type baseType = typeof(EntityBase<>);
    IEnumerable<Type> modelTypes = assembly.GetTypes().Where(m => m.IsAssignableToGenericType(baseType) && !m.IsAbstract);
    foreach(Type modelType in modelTypes)
    {
        T4ModelInfo model = new T4ModelInfo(modelType, true);
        //实体映射类
        EntityConfigurationTemplate config = new EntityConfigurationTemplate(model);
        var path = model.UseModuleDir 
            ? string.Format(@"{0}\{1}", projectPath, model.Name)
            : string.Format(@"{0}\", projectPath);
        config.Output.Encoding = Encoding.UTF8;
        config.RenderToFile(Path.Combine(path, config.FileName));

        //实体仓储操作接口
        IEntityRepositoryTemplate irep= new IEntityRepositoryTemplate(model);
        path = model.UseModuleDir
            ? string.Format(@"{0}\{1}", projectPath, model.Name)
            : string.Format(@"{0}\", projectPath);
        irep.Output.Encoding = Encoding.UTF8;
        irep.RenderToFile(Path.Combine(path, irep.FileName));
        
        //实体仓储操作实现
        EntityRepositoryTemplate rep= new EntityRepositoryTemplate(model);
        path = model.UseModuleDir
            ? string.Format(@"{0}\{1}", projectPath, model.Name)
            : string.Format(@"{0}\", projectPath);
        rep.Output.Encoding = Encoding.UTF8;
        rep.RenderToFile(Path.Combine(path, rep.FileName));
    }
#>